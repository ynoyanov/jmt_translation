package com.javad.resource_translator;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import com.javad.utils.FileFunctions;public class ResourceTranslator {	// 1. Update translation from source	// ~/Work/Android	//	// 2. copy translations for a dealer	// ~/Work/Android -copyto ~/Work/Android_resources [language]	//	// 2. update translation received from a dealer	// ~/Work/Android -copyfrom ~/Work/Android_resources -tolanguage [language] 	//	//3. Check resources	// ~/Work/Android -check [language]	//	// [language] is ru zh tr fi hu etc.		/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		if(args.length == 0) {			printUsage();			return;		}		boolean isCheck = false;		boolean isCopyTo = false;		boolean isCopyFrom = false;		File fTo=null, fFrom=null;		String languageFrom="";		if((args.length == 3 || args.length == 4) && args[1].toLowerCase().equals("-copyto")) {			isCopyTo = true;			String pathTo = args[2];			fTo = pathToFile(pathTo);			if(!fTo.isDirectory() || !fTo.exists()) {				printVersion();				System.out.println("result path '"+pathTo+"' doesn't exist");				return;			}			if(args.length == 4)				languageFrom = args[3];		} else if(args.length == 5 && args[1].toLowerCase().equals("-copyfrom") && args[3].toLowerCase().equals("-tolanguage")) {				isCopyFrom = true;				String pathTo = args[2];				fFrom = pathToFile(pathTo);				if(!fFrom.isDirectory() || !fFrom.exists()) {					printVersion();					System.out.println("source path '"+pathTo+"' doesn't exist");					return;				}				languageFrom = args[4];		} else if(args.length == 3 && args[1].toLowerCase().equals("-check")) {			isCheck = true;			languageFrom = args[2];		} else if(args.length != 1) {			printUsage();			return;		}				String path = args[0];//args[args.length-1];		File f = pathToFile(path);		if(!f.isDirectory() || !f.exists()) {			printVersion();			System.out.println("path '"+path+"' doesn't exist");			return;		}		if(isCopyTo && fTo.exists()) {			clearDirectory(fTo);		}		if(isFolderOK(f)) { 		// project folder			ResourceTranslator translator = new ResourceTranslator();			if(isCopyTo)				translator.copyTo(f, fTo, languageFrom);			else if(isCopyFrom)				translator.copyFrom(f, fFrom, languageFrom);			else if(isCheck) {				System.out.println("Checking for language " + languageFrom + " ...");				translator.checkLanguage(f, languageFrom);			}			else {				System.out.println("Updating translation...");				translator.translate(f);			}		} else {			{				// multiple projects				String[] directories = f.list(new FilenameFilter() {				  @Override				  public boolean accept(java.io.File current, java.lang.String name)				  {				  //public boolean accept(File current, String name) {					  if(name == null || name.length() == 0 || name.charAt(0) == '.')						  return false;					  File dir = new File(current, name);					  return isFolderOK(dir);				  }				});				if(isCheck) {					System.out.println("Checking for language " + languageFrom + " ...");				} else {					if(isCopyFrom)						System.out.println("Updating translation...");					else if(isCopyTo)						System.out.println("Coppying translation...");				}				for(String project : directories)				{					ResourceTranslator translator = new ResourceTranslator();					if(isCopyTo)						translator.copyTo(new File(f, project), new File(fTo, project), languageFrom);					else if(isCopyFrom)						translator.copyFrom(new File(f, project), new File(fFrom, project), languageFrom);					else if(isCheck)						translator.checkLanguage(new File(f, project), languageFrom);					else						translator.translate(new File(f, project));				}			}		}		System.out.println("Successfully finished");	}		static boolean isFolderOK(File dir)	{		  if(!dir.isDirectory())			  return false;		  if(!new File(dir, "src").exists())			  return false;		  if(!new File(dir, "res").exists())			  return false;		  return true;	}		static void printVersion()	{		System.out.println("Resource Translator v 1.4");	}	static void printUsage()	{		printVersion();		System.out.println("usage: resource_translator path_to_folder");		System.out.println("or: resource_translator path_to_folder -copyTo path_to_result [2charlanguage]");		System.out.println("or: resource_translator path_to_folder -copyFrom path_to_folder -toLanguage 2charlanguage");		System.out.println("eg: resource_translator ~/Work/Android -copyTo ~/Work/Android_Res");		System.out.println("it will extract resourses to translate into folder Android_Res");		System.out.println("eg: resource_translator ~/Work/Android -copyFrom ~/Work/Android_resources -toLanguage zh");		System.out.println("it will replace current resources for language zh from Android_resources folder");	}		static File pathToFile(String path)	{		String strHome = System.getProperty("user.home");		path = path.replace("~", strHome);		if(path.charAt(path.length()-1) != '/')			path += "/";		File f = new File(path);		return f;	}		boolean _isCheckOnly=false;	File project_path;	ArrayList<ResourceStringFile> string_files;	public ResourceTranslator() {	}	ResourceStringFile loadStringsFromFile(File project_path, String language)	{		this.project_path = project_path;		File f_strings = new File(project_path, "res/values"+language);		String[] string_file_names = f_strings.list(new FilenameFilter() {			  @Override			  public boolean accept(File current, String name) {				  if(name == null || name.length() == 0 || !name.startsWith("strings_") || !name.endsWith(".xml"))					  return false;				  File dir = new File(current, name);				  if(!dir.isFile())					  return false;			    return true;			  }			});				string_files = new ArrayList<ResourceStringFile>();		if(string_file_names != null) {			for(String string_file_name : string_file_names) 			{				ResourceStringFile sf = new ResourceStringFile();				if(sf.readFromFile(new File(f_strings, string_file_name))) {					string_files.add(sf);				}			}		}		ResourceStringFile sf = (string_files.size() > 0) ? string_files.get(string_files.size()-1) : new ResourceStringFile();		if(string_files.size() > 0) {		}				ArrayList<File> java_files  = new ArrayList<File>();		listJava(new File(project_path, "src"), java_files);		for(File f_java : java_files) 		{			sf.translateJava(f_java);			sf.markUsingIdsFromJava(f_java);		}		ArrayList<File> layout_files  = new ArrayList<File>();		listXml(new File(project_path, "res/layout"+language), layout_files);		listXml(new File(project_path, "res/layout-land"+language), layout_files);		for(File f_layout : layout_files) 		{			sf.markUsingIdsFromLayout(f_layout);		}		ArrayList<File> menu_files  = new ArrayList<File>();		listXml(new File(project_path, "res/menu"+language), menu_files);		for(File f_menu : menu_files) 		{			sf.markUsingIdsFromLayout(f_menu);		}		ArrayList<File> preferance_files  = new ArrayList<File>();		listXml(new File(project_path, "res/xml"+language), preferance_files);		for(File f_preferance : preferance_files) 		{			sf.markUsingIdsFromLayout(f_preferance);		}		File manifest_file = new File(project_path, "AndroidManifest.xml");		if(manifest_file.exists())			sf.markUsingIdsFromLayout(manifest_file);				return sf;	}	public boolean translate(File project_path)	{		ResourceStringFile sf = loadStringsFromFile(project_path, "");		if(sf.isChanged()) {			sf.writeToFile();		}		return true;	}	public boolean checkLanguage(File project_path, String language)	{		ResourceStringFile sf_english = loadStringsFromFile(project_path, "");		ResourceStringFile sf_russian = loadStringsFromFile(project_path, "-"+language);		for(ResourceStringFile.ResourceString str : sf_russian._strings.values()) {			if(sf_english._strings.containsKey(str.identifier)) {				ResourceStringFile.ResourceString str2 = sf_english._strings.get(str.identifier);				ArrayList<String> formats_english = extractFormats(str.value); 				ArrayList<String> formats_russian = extractFormats(str2.value);				boolean isWrongFormat = false;				if(formats_english.size() == formats_russian.size()) 				{					for(String format : formats_russian) 					{						boolean isSuchFormatExist = false;						for(int i = 0; i < formats_english.size(); i++) 						{							String format2 = formats_english.get(i);							if(format.equals(format2)) {								formats_english.set(i, "");								isSuchFormatExist = true;								break;							}						}						if(!isSuchFormatExist) {							isWrongFormat = true;							break;						}					}				} else {					isWrongFormat = true;				}				if(isWrongFormat) {					System.out.println("Wrong translation for "+str.identifier + "(file "+str.definedInFileName + " line:"+str.definedInFileLine + ") english="+str2.value + "translated="+str.value);				}			} else {				System.out.println("No translation for "+str.identifier + "(file "+str.definedInFileName + " line:"+str.definedInFileLine);			}		}		return false;	}		ArrayList<String> extractFormats(String str)	{		ArrayList<String> formats = new ArrayList<String>();		if(str.indexOf('%') == -1)			return formats;		int beginFormatIndex = -1;		int endFormatIndex = -1;		for(char i = 0; i < str.length(); i++) {			char c = str.charAt(i);			if(beginFormatIndex >= 0) {				if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 's' || c == 't' || c == '%') {					endFormatIndex = i;					String format = str.substring(beginFormatIndex, endFormatIndex+1);					formats.add(format);					beginFormatIndex = -1;					endFormatIndex = -1;				}			} else {				if(c == '%') {					beginFormatIndex = i;					endFormatIndex = i;				}			}		}		return formats;	}	void listJava(File directory, ArrayList<File> files) 	{	    // get all the files from a directory	    File[] fList = directory.listFiles();	    if(fList == null)	    	return;	    for (File file : fList) {	        if (file.isFile() && file.getName().endsWith(".java")) {	            files.add(file);	        } else if (file.isDirectory()) {	            listJava(file, files);	        }	    }	}		void listXml(File directory, ArrayList<File> files) 	{	    // get all the files from a directory	    File[] fList = directory.listFiles();	    if(fList == null)	    	return;	    for (File file : fList) {	        if (file.isFile() && file.getName().endsWith(".xml")) {	            files.add(file);	        } else if (file.isDirectory()) {	        	listXml(file, files);	        }	    }	}			boolean copyTo(File project_path, File result_path, String language)	{		this.project_path = project_path;		boolean result1 = copyStringsFromFolder(project_path, result_path, "res/values", language);		//boolean result2 = copyStringsFromFolder(project_path, result_path, "res/values-"+language);		return result1;// && result2;	}		boolean copyStringsFromFolder(File project_path, File result_path, String subFolder, String language)	{			boolean result = true;				File f_strings_source = new File(project_path, subFolder);		if(!f_strings_source.exists())			return true; // nothing to copy		File f_strings_source_lang = f_strings_source;		if(language != null && language.length() == 2) {			f_strings_source_lang = new File(project_path, subFolder+"-"+language);//			if(!f_strings_source.exists())//				f_strings_source_lang = f_strings_source;		}		File f_strings_result = new File(result_path, subFolder);		File f_strings_result_lang = (language != null && language.length() == 2) ? new File(result_path, subFolder+"-"+language) : null;		String[] string_file_names = f_strings_source.list(new FilenameFilter() {			  @Override			  public boolean accept(File current, String name) {				  if(name == null || name.length() == 0 || 						  ((!name.startsWith("strings_") || !name.endsWith(".xml")) && 						   (!name.startsWith("lists_") || !name.endsWith(".xml")) && 						   !name.endsWith("_lists.xml") ) )					  return false;				  File dir = new File(current, name);				  if(!dir.isFile())					  return false;			    return true;			  }			});				if(string_file_names.length == 0)			return true; // nothing to copy		if(!f_strings_result.exists())			f_strings_result.mkdirs();		if(f_strings_result_lang != null && !f_strings_result_lang.exists())			f_strings_result_lang.mkdirs();		for(String string_file_name : string_file_names) 		{			File fSrc = new File(f_strings_source, string_file_name);			File fDst = new File(f_strings_result, string_file_name);			if(!copyFile(fSrc, fDst))				result = false;			if(f_strings_result_lang != null) {				File fSrcLang = new File(f_strings_source_lang, string_file_name);				if(!fSrcLang.exists())					fSrcLang = fSrc;				File fDstLang = new File(f_strings_result_lang, string_file_name);				if(!copyFile(fSrcLang, fDstLang))					result = false;			}		}		return result;	}		public static boolean copyFile(File sourceFile, File destFile) 	{		if (sourceFile == null || destFile == null)			return false;		if (!sourceFile.exists())			return false;		if (destFile.exists()) {			if (!destFile.delete())				return false;		}		boolean result = true;		FileInputStream fis = null;		FileOutputStream fos = null;		InputStream in = null;		OutputStream out = null;		try {			fis = new FileInputStream(sourceFile);			fos = new FileOutputStream(destFile);			in = new BufferedInputStream(fis);			out = new BufferedOutputStream(fos);			result = FileFunctions.copyFile2(in, out);		} catch (IOException e) {			e.printStackTrace();			result = false;		}		try {			if (fos != null)				fos.close();		} catch (IOException e) {			e.printStackTrace();		}		try {			if (fis != null)				fis.close();		} catch (IOException e) {			e.printStackTrace();		}		return result;	}	//	static void clearFolder(File result_path)//	{//		if(result_path.exists()) {//			deleteDirectory(result_path);//		}//		result_path.mkdirs();//	}	static void clearDirectory(File directory)	{	    if(directory.exists())	    {	        File[] files = directory.listFiles();	        if(null!=files) {	            for(int i=0; i<files.length; i++) {	                if(files[i].isDirectory()) {	                    deleteDirectory(files[i]);	                }	                else {	                    files[i].delete();	                }	            }	        }	    }			}	 static boolean deleteDirectory(File directory) 	 {		 clearDirectory(directory);	    return(directory.delete());	}	boolean copyFrom(File project_path, File from_path, String languageFrom)	{		this.project_path = project_path;		String languageDir = "res/values-"+languageFrom;		File resultDir = new File(project_path, languageDir);		if(resultDir.exists())			clearDirectory(resultDir);		if(!resultDir.exists())			resultDir.mkdirs();		boolean result1 = copyStringsFromFolder(from_path, project_path, languageDir, null);		return result1;	}}
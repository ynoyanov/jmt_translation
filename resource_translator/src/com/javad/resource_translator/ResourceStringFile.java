package com.javad.resource_translator;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;public class ResourceStringFile {	class ResourceString	{		public String identifier;		public String value;		public String definedInFileName;		public int    definedInFileLine;		public boolean used;		public String usedInFileName;		public int    usedInFileLine;		public ResourceString()		{			identifier = "";			value = "";			used = false;			definedInFileLine = 0;			usedInFileLine = 0;		}	}	boolean _initialized;	boolean _changed;	String _header;	String _footer;	HashMap<String, ResourceString> _strings;	File _file;		public ResourceStringFile() 	{		_header = "<resources>\n\n";		_footer = "\n</resources>\n";		_initialized = false;		_changed = false;		_strings = new HashMap<String, ResourceString>();	}	public boolean readFromFile(File f)	{		_file = f;		String xml = readFile(f);		int[] lines = computeEOLs(xml);		int begin = xml.indexOf("<string name=");		if(begin == -1)			return false;		while( (begin > 0) && (xml.charAt(begin) != '\n') ) begin--;		int bg = begin-1;		while( (bg > 0) && (xml.charAt(bg) != '\n') ) bg--;		String prevline = xml.substring(bg, begin);		if(prevline.indexOf("<!--") != -1 && prevline.indexOf("-->") != -1)			begin = bg;		begin++;		_header = xml.substring(0, begin);		String begin_pattern = "<string name="; 		String end_pattern = "</string>"; 		begin = 0;		while(begin >= 0 && begin < xml.length()) 		{			int begin2 = xml.indexOf(begin_pattern, begin);			int end2 = xml.indexOf(end_pattern, begin);			if(begin2 == -1 || end2 == -1)				break;			String str = xml.substring(begin2+begin_pattern.length(), end2+1);			int b1 = str.indexOf('"');			int b2 = (b1 != -1) ? str.indexOf('"', b1+1) : -1;			int t1 = str.indexOf('>');			int t2 = (t1 != -1) ? str.indexOf('<', t1) : -1;			if(b1 != -1 && b2 != -1 && b2 > b1 && t1 != -1 && t2 != -1 && t2 > t1) {				String str_id0 = str.substring(b1+1, b2);				String str_id = str_id0.toLowerCase();				if(!str_id.equals(str_id0) ) {					System.out.println("Capital chars in id:'" + str_id0 + "' File:"+f.getName()+":"+position2line(begin2, lines));				}				String str_value = str.substring(t1+1, t2);				ResourceString rs = new ResourceString();				rs.identifier = str_id;				rs.value = str_value;				rs.definedInFileName = f.getName();				rs.definedInFileLine = position2line(begin2, lines);				rs.used = false;				_strings.put(str_id, rs);			}			begin = xml.indexOf('\n', end2);			if(begin != -1)				begin = begin + 1;		}		if(begin != -1) {			_footer = xml.substring(begin);		}		_initialized = _strings.size() > 0;				// replaced used 		return true;	}			static String readFile(File f)	{		String content = "";		String line;		try {			BufferedReader reader = new BufferedReader(new FileReader(f));			while ((line = reader.readLine()) != null)			{			    content += "\n" + line;			}			// Cut of the first newline;			if(content.length() > 0)				content = content.substring(1);			// Close the reader			reader.close();		} catch(IOException e) {			e.printStackTrace();			content = "";		}		return content;	}		int[] computeEOLs(String xml)	{		ArrayList<Integer> eols = new ArrayList<Integer>();		for(int i = 0 ; i < xml.length(); i++)		{			if(xml.charAt(i) == '\n')			{				eols.add(Integer.valueOf(i));			}		}		int[] eolsi = new  int[eols.size()];		for(int i = 0; i < eols.size(); i++)			eolsi[i] = eols.get(i).intValue();		return eolsi;	}		int position2line(int position, int[] eolsi)	{		for(int i = 0; i < eolsi.length; i++)		{			if(position < eolsi[i])				return i+1;		}		return 0;	}		public void translateJava(File f)	{		String java = readFile(f);		int[] lines = computeEOLs(java);		int begin = 0;		String pattern = "_(\"";		while(begin < java.length()) 		{			int begin2 = java.indexOf(pattern, begin);			if(begin2 == -1)				break;			int end2 = java.indexOf('\"', begin2+pattern.length());			if(end2 == -1)				break;			String str_value = java.substring(begin2+pattern.length(), end2);			String str_id = toId(str_value);			if(!_strings.containsKey(str_id)) {				ResourceString rs = new ResourceString();				rs.identifier = str_id;				rs.value = str_value;				rs.definedInFileName = f.getName();				rs.definedInFileLine = position2line(begin2, lines);				rs.used = true;				rs.usedInFileName = rs.definedInFileName;//f.getName();				rs.usedInFileLine = rs.definedInFileLine;//begin2;				_strings.put(str_id, rs);				_changed = true;			} else {				ResourceString rs = _strings.get(str_id);				rs.used = true;				rs.usedInFileName = f.getName();				rs.usedInFileLine = position2line(begin2, lines);				_strings.put(str_id, rs);			}			begin = end2;		}	}		public boolean isChanged()	{		return _changed;	}		public static String toId(String str)	{		//return com.javad.utils.internationalization.T.toId(str);			str = "string_" + str.toLowerCase().replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t");//			str = "string_" + str.toLowerCase();			boolean changed=false;			char[] chars = str.toCharArray();			for(int i = 0; i < chars.length; i++) 			{				char c = chars[i];				if(isCharOkForId(c)) 					continue;				//if(c == '.') {				//	chars[i] = '0';				//} else 				if(c == '\r' || c == '\n' || c == '\t') {					chars[i] = '1';				} else {					chars[i] = '_';				}				changed = true;			}			if(!changed)				return str;			return String.valueOf(chars);	}	public static boolean isCharOkForId(char c)	{		return ( (c == '_') || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));	}			void markUsingIdsFromLayout(File f)	{		String xml = readFile(f);		int[] lines = computeEOLs(xml);		int begin = 0;		String pattern = "@string/";		while(begin < xml.length()) 		{			int begin2 = xml.indexOf(pattern, begin);			if(begin2 == -1)				break;			int end2 = xml.indexOf('\"', begin2+pattern.length());			if(end2 == -1)				break;			String str_id0 = xml.substring(begin2+pattern.length(), end2);			String str_id = str_id0.toLowerCase();			if(!str_id.equals(str_id0) ) {				System.out.println("Capital chars in id:'" + str_id0 + "' File:"+f.getName()+":"+position2line(begin2, lines));			}			if(_strings.containsKey(str_id)) {				ResourceString rs = _strings.get(str_id);				rs.used = true;				rs.usedInFileName = f.getName();				rs.usedInFileLine = position2line(begin2, lines);				_strings.put(str_id, rs);				_changed = true;			}			begin = end2;		}			}		public void markUsingIdsFromJava(File f)	{//		if(f.getName().indexOf("StatusBarUpdater") != -1) {//			String s = f.getName();//			int ii = 0;//		}		String xml = readFile(f);		int[] lines = computeEOLs(xml);		int begin = 0;		String pattern = "R.string.";		while(begin < xml.length()) 		{			int begin2 = xml.indexOf(pattern, begin);			if(begin2 == -1)				break;			int end2 = begin2+pattern.length();			while(end2 < xml.length()) {				char c = xml.charAt(end2); 				if(!isCharOkForId(c))					break;				end2++;			}			String str_id0 = xml.substring(begin2+pattern.length(), end2);			String str_id = str_id0.toLowerCase();			if(!str_id.equals(str_id0) ) {				System.out.println("Capital chars in id:'" + str_id0 + "' File:"+f.getName()+":"+position2line(begin2, lines));			}			if(_strings.containsKey(str_id)) {				ResourceString rs = _strings.get(str_id);				rs.used = true;				rs.usedInFileName = f.getName();				rs.usedInFileLine = position2line(begin2, lines);				_strings.put(str_id, rs);				_changed = true;			}			begin = end2;		}			}			public boolean writeToFile()	{		if(_file == null)			return false;        //create a temporary file//		try {//			File fold = new File(_file.getCanonicalPath() + ".bak"); //			_file.renameTo(fold);//		} catch(IOException e) {//			e.printStackTrace();//		}		BufferedWriter writer = null;        try {            writer = new BufferedWriter(new FileWriter(_file));            writer.write(_header);            for(String str_id : _strings.keySet()) {            	ResourceString rs = _strings.get(str_id);            	if(rs.used) {            		String str_value = rs.value;            		str_value = toXmlValue(str_value);            		if(str_id != null && str_value != null) {            			writer.write("    <!-- Used in file " + rs.usedInFileName + ":" + rs.usedInFileLine + " -->\n");            			writer.write("    <string name=\"" + str_id + "\">" + str_value + "</string>\n");            		}            	}            }            for(String str_id : _strings.keySet()) {            	ResourceString rs = _strings.get(str_id);            	if(!rs.used) {            		String str_value = rs.value;            		str_value = toXmlValue(str_value);            		if(str_id != null && str_value != null) {            			writer.write("    <!-- UNUSED STRING -->\n");            			writer.write("    <string name=\"" + str_id + "\">" + str_value + "</string>\n");            		}            	}            }            writer.write(_footer);        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                // Close the writer regardless of what happens...                writer.close();            } catch (Exception e) {            	e.printStackTrace();            }        }		        return true;	}		String toXmlValue(String value)	{		value = value.replace(" & ", " &amp; ").replace("\"", "&quot;").replace("\\'", "'").replace("'", "\\'").replace("<", "&lt;").replace(">", "&gt;").replace("...", "&#8230;");//		"   &quot;//		'   &apos;//		<   &lt;//		>   &gt;//		&   &amp;				return value;	}}